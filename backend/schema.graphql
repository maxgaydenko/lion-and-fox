# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  lastAccessDate: DateTime
  expirationDate: DateTime
  role: String
  password: PasswordState
  showcases(
    where: ShowcaseWhereInput! = {}
    orderBy: [ShowcaseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Showcase!]
  showcasesCount(where: ShowcaseWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  lastAccessDate: DateTimeNullableFilter
  expirationDate: DateTimeNullableFilter
  role: StringFilter
  showcases: ShowcaseManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ShowcaseManyRelationFilter {
  every: ShowcaseWhereInput
  some: ShowcaseWhereInput
  none: ShowcaseWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  lastAccessDate: OrderDirection
  expirationDate: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  lastAccessDate: DateTime
  expirationDate: DateTime
  role: String
  password: String
  showcases: ShowcaseRelateToManyForUpdateInput
}

input ShowcaseRelateToManyForUpdateInput {
  disconnect: [ShowcaseWhereUniqueInput!]
  set: [ShowcaseWhereUniqueInput!]
  create: [ShowcaseCreateInput!]
  connect: [ShowcaseWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  lastAccessDate: DateTime
  expirationDate: DateTime
  role: String
  password: String
  showcases: ShowcaseRelateToManyForCreateInput
}

input ShowcaseRelateToManyForCreateInput {
  create: [ShowcaseCreateInput!]
  connect: [ShowcaseWhereUniqueInput!]
}

type Page {
  id: ID!
  menuName: String
  menuSection: String
  url: String
  pos: Int
  isPublished: Boolean
  hasBlazon: Boolean
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  content: Page_content_Document
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
  url: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  menuName: StringFilter
  menuSection: StringFilter
  url: StringFilter
  pos: IntFilter
  isPublished: BooleanFilter
  hasBlazon: BooleanFilter
  projects: ProjectManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  menuName: OrderDirection
  menuSection: OrderDirection
  url: OrderDirection
  pos: OrderDirection
  isPublished: OrderDirection
  hasBlazon: OrderDirection
}

input PageUpdateInput {
  menuName: String
  menuSection: String
  url: String
  pos: Int
  isPublished: Boolean
  hasBlazon: Boolean
  projects: ProjectRelateToManyForUpdateInput
  content: JSON
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  menuName: String
  menuSection: String
  url: String
  pos: Int
  isPublished: Boolean
  hasBlazon: Boolean
  projects: ProjectRelateToManyForCreateInput
  content: JSON
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type Project {
  id: ID!
  page: Page
  url: String
  pos: Int
  isPublished: Boolean
  title: String
  img: ImageFieldOutput
  hasBlazon: Boolean
  gallery: JSON
  content: Project_content_Document
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Project_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProjectWhereUniqueInput {
  id: ID
  url: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  page: PageWhereInput
  url: StringFilter
  pos: IntFilter
  isPublished: BooleanFilter
  title: StringFilter
  hasBlazon: BooleanFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  url: OrderDirection
  pos: OrderDirection
  isPublished: OrderDirection
  title: OrderDirection
  hasBlazon: OrderDirection
}

input ProjectUpdateInput {
  page: PageRelateToOneForUpdateInput
  url: String
  pos: Int
  isPublished: Boolean
  title: String
  img: ImageFieldInput
  hasBlazon: Boolean
  gallery: JSON
  content: JSON
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  page: PageRelateToOneForCreateInput
  url: String
  pos: Int
  isPublished: Boolean
  title: String
  img: ImageFieldInput
  hasBlazon: Boolean
  gallery: JSON
  content: JSON
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

type Showcase {
  id: ID!
  title: String
  pos: Int
  isPublished: Boolean
  img: ImageFieldOutput
  gallery: JSON
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input ShowcaseWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ShowcaseWhereInput {
  AND: [ShowcaseWhereInput!]
  OR: [ShowcaseWhereInput!]
  NOT: [ShowcaseWhereInput!]
  id: IDFilter
  title: StringFilter
  pos: IntFilter
  isPublished: BooleanFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ShowcaseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  pos: OrderDirection
  isPublished: OrderDirection
}

input ShowcaseUpdateInput {
  title: String
  pos: Int
  isPublished: Boolean
  img: ImageFieldInput
  gallery: JSON
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ShowcaseUpdateArgs {
  where: ShowcaseWhereUniqueInput!
  data: ShowcaseUpdateInput!
}

input ShowcaseCreateInput {
  title: String
  pos: Int
  isPublished: Boolean
  img: ImageFieldInput
  gallery: JSON
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createShowcase(data: ShowcaseCreateInput!): Showcase
  createShowcases(data: [ShowcaseCreateInput!]!): [Showcase]
  updateShowcase(
    where: ShowcaseWhereUniqueInput!
    data: ShowcaseUpdateInput!
  ): Showcase
  updateShowcases(data: [ShowcaseUpdateArgs!]!): [Showcase]
  deleteShowcase(where: ShowcaseWhereUniqueInput!): Showcase
  deleteShowcases(where: [ShowcaseWhereUniqueInput!]!): [Showcase]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  role: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  showcases(
    where: ShowcaseWhereInput! = {}
    orderBy: [ShowcaseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Showcase!]
  showcase(where: ShowcaseWhereUniqueInput!): Showcase
  showcasesCount(where: ShowcaseWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
